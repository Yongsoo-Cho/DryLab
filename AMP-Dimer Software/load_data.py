# -*- coding: utf-8 -*-
"""SynBio

Automatically generated by Colab. Script by Shlok Panchal as a part of a feature selection task.

Note 06/19/24: Code has not been adapted for project yet.

Original file is located at
    https://colab.research.google.com/drive/1g3QPWqqMJH8_cPFHIPxEqSKY8QMmADMS
"""

try:
    from google.colab import drive
    drive.mount('/content/drive', force_remount=True)

    project_directory = '/content/drive/MyDrive/SynBio/'
    os.chdir(project_directory)
except:
    pass

import pandas as pd

file_path = "/content/drive/MyDrive/SynBio/Images/peptides (1).csv"
data = pd.read_csv(file_path)

print("First few rows of the dataset:")
print(data.head())

print("\nDataset Information:")
print(data.info())

print("\nSummary Statistics:")
print(data.describe())

import re

class AMP:
    def __init__(self, name, sequence):
        self.name = name
        self.sequence = sequence

amp_list = [
    AMP("Citropin 1.1", "GLFDVIKKVASVIGGL"),
    AMP("CA(1-7)M(2-9)NH2", "KWKLFKKILKYL"),
    AMP("Tp0749_C", "AVPGDLQLALAALEQLEES"),
    AMP("d,l-K6L9 (Amp1D)", "KLKLLLLKLLLL")
]

def escape_special_characters(name):
    return re.escape(name)

for amp in amp_list:
    name_present = any(data['NAME'].str.contains(escape_special_characters(amp.name), na=False))
    sequence_present = any(data['SEQUENCE'].str.contains(amp.sequence))
    if name_present and sequence_present:
        print(f"Sequence {amp.sequence} with name {amp.name} found in dataset")
    else:
        print(f"Sequence {amp.sequence} with name {amp.name} not found in dataset")

!pip install biopython

import random
from Bio.SeqUtils.ProtParam import ProteinAnalysis

#amp class as before
class AMP:
    def __init__(self, name, sequence):
        self.name = name
        self.sequence = sequence

amp_list = [
    AMP("Citropin 1.1", "GLFDVIKKVASVIGGL")
]

random_indices = random.sample(range(len(data)), 5)  # randomly select 5 indices from the dataset
for idx in random_indices:
    name = data.iloc[idx]['NAME']
    sequence = data.iloc[idx]['SEQUENCE']
    amp_list.append(AMP(name, sequence))

#extraction process
def extract_features(sequence):
    analyzed_seq = ProteinAnalysis(sequence)
    features = {
        'length': len(sequence),
        'molecular_weight': analyzed_seq.molecular_weight(),
        'aromaticity': analyzed_seq.aromaticity(),
        'instability_index': analyzed_seq.instability_index(),
        'isoelectric_point': analyzed_seq.isoelectric_point(),
        'gravy': analyzed_seq.gravy()
    }
    return features

#extract some feartures
amp_features = [extract_features(amp.sequence) for amp in amp_list]

#conv to dataframe
amp_features_df = pd.DataFrame(amp_features)
amp_features_df['name'] = [amp.name for amp in amp_list]
amp_features_df['sequence'] = [amp.sequence for amp in amp_list]

print("Extracted Features:")
print(amp_features_df)